openapi: 3.1.0
info:
  version: 0.1.0
  title: sigloyland
  termsOfService: https://sigloyland.com/terms/
  contact:
    email: contact@sigloyland.com
    url: http://sigloyland.com/contact
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://redocly.github.io/openapi-template/logo.png
  description: |
    Documentation for **sigloyland** API
tags:
  - name: User
    description: Operations about user
servers:
  - url: http://sigloyland.com/api/v1
  - url: https://sigloyland.com/api/v1
paths:
  /user/register:
    post:
      security: []
      operationId: register
      tags:
        - User
      summary: register a new user
      description: register a new user using `email` and `password`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterationForm'
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '409':
          description: User already exists
  /user/login:
    post:
      security: []
      operationId: login
      tags:
        - User
      summary: login
      description: login using `email` and `password`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginForm'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        '401':
          description: Incorrect Username or Password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/refresh:
    post:
      operationId: refresh
      tags:
        - User
      summary: refresh token
      description: refresh JWT token
      security:
        - jwt: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        '401':
          description: Incorrect Username or Password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    get:
      tags:
        - User
      summary: Get user
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: getUser
      security:
        - jwt: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                email: user@example.com
        '403':
          description: Forbidden
        '404':
          description: User not found
  /products:
    get:
      tags:
        - Product
      summary: Get products
      description: |
        Get all products
      operationId: getProducts
      security: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: No product found
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://sigloyland.com/api/oauth/dialog
          scopes:
            read:users: read users info
            write:users: modify or remove users
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Email:
      description: User email address
      type: string
      example: john.smith@example.com
    Password:
      description: Password
      type: string
      format: password
      minLength: 8
      example: P@ssw0rd
    RegisterationForm:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
    LoginForm:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
    JWTToken:
      type: object
      properties:
        code:
          description: Status code
          type: number
          format: int32
          example: 200
        expire:
          description: Expiration date of the token
          type: string
          format: datetime
          example: '2023-11-01T13:01:55+03:30'
        token:
          description: JWT Token
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTg4MzA3NTksImlkIjoiYWRtaW5Ac2lnbG95bGFuZC5jb20iLCJvcmlnX2lhdCI6MTY5ODgyNzE1OX0.BgaJY-4fbJVVqe5LP-4ID5IeL0rBiwuBsQk8Oxtu1xk
    Error:
      type: object
      properties:
        code:
          description: status code
          type: number
          format: int32
        message:
          description: error message
          type: string
    User:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
    Product:
      type: object
      properties:
        price:
          description: Product price
          type: number
          format: double
          example: 49.99
